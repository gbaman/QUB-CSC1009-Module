<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	x:Class="BigSummerFestivalScreens.Search_Bar"
	x:Name="UserControl"
	d:DesignWidth="1903" d:DesignHeight="200" Height="200" Width="1903">
	<UserControl.Resources>
		
		<Style TargetType="{x:Type ToggleButton}">
			<Setter Property="Background" Value="Green"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="Red"/>
				</Trigger>
			</Style.Triggers>
		</Style>
<!-- Simple ComboBox 
	This uses the ComboBoxToggleButton to expand and collapse a Popup control
	SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item 
	The Popup shows a list of items in a StackPanel-->
	
		<Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
			<Setter Property="SnapsToDevicePixels" Value="true"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ComboBox}">
						<Grid >
						<!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
							<ToggleButton Grid.Column="0" Background="Transparent" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" BorderThickness="0" Margin="308,0,-21.333,0" >
							</ToggleButton>
							<ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
						<!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
							<TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
						<!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
							<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
								<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
									<Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
									<ScrollViewer Margin="-6.5,-33.5,14.5,45.5" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

							
									<!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
										<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
								
									</ScrollViewer>
								</Grid>
							</Popup>
						</Grid>
						<ControlTemplate.Triggers>						
						<!-- This forces the DropDown to have a minimum size if it is empty -->
							<Trigger Property="HasItems" Value="false">
								<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
							<Trigger Property="IsGrouping" Value="true">
								<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
							</Trigger>
							<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
								<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
								<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
							</Trigger>
							<Trigger Property="IsEditable" Value="true">
								<Setter Property="IsTabStop" Value="false"/>
								<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
								<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Grid>
			<Image Margin="1554,6.5,0,21.5" Source="search.png" Stretch="Fill"/>
			<ComboBox HorizontalAlignment="Left" Margin="1564.333,10,0,0" Style="{DynamicResource ComboBoxStyle1}" VerticalAlignment="Top" Width="308" Height="30.627">
				<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}">
					 <StackPanel Orientation="Horizontal">
					<Image Source="dropdown.png" Stretch="Uniform" Height="170"/>
                </StackPanel>
				</ComboBoxItem>
				
			</ComboBox>
		</Grid>
	</Grid>
</UserControl>